{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4b1af9c1",
   "metadata": {},
   "source": [
    "# Fashion MNIST\n",
    "- Vishal Maurya MDS202354\n",
    "- Ashish Bisht MDS202313"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfb8fb50",
   "metadata": {},
   "source": [
    "## Libraries used"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f4382a32",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "import math\n",
    "import warnings\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "941d9578",
   "metadata": {},
   "source": [
    "## Loading Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7076c2c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.datasets import fashion_mnist\n",
    "(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55b17843",
   "metadata": {},
   "source": [
    "### Rescaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "43f43cd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_images = train_images/255\n",
    "test_images = test_images/255"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02f80237",
   "metadata": {},
   "source": [
    "## Visualising a image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8efb777c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60000, 28, 28)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_images.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9d26a85f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1a980d93490>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(train_images[1], cmap = 'gray')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc45cfa1",
   "metadata": {},
   "source": [
    "## Clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0c99a6a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_images_flattened = train_images.reshape(train_images.shape[0], -1)\n",
    "test_images_flattened = test_images.reshape(test_images.shape[0], -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "42b1e371",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "52.183234453201294\n"
     ]
    }
   ],
   "source": [
    "s = time.time()\n",
    "\n",
    "n_clusters = 20\n",
    "kmeans = KMeans(n_clusters=n_clusters, n_init = 4)\n",
    "kmeans.fit(train_images_flattened)\n",
    "\n",
    "print(time.time() - s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "86c287db",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_labels_clustered = kmeans.labels_\n",
    "cluster_centers = kmeans.cluster_centers_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5eed278e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(4, 5, figsize=(12, 6))\n",
    "for i in range(20):\n",
    "    ax = axs[i // 5, i % 5]\n",
    "    ax.imshow(cluster_centers[i].reshape(28, 28), cmap='gray')\n",
    "    ax.set_title(f'Cluster {i}')\n",
    "    ax.axis('off')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05277863",
   "metadata": {},
   "source": [
    "## Finding representative images\n",
    "- Finding nearest image corresponding to each centroid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "34a64fe4",
   "metadata": {},
   "outputs": [],
   "source": [
    "nearest_images = []\n",
    "nearest_labels = []\n",
    "\n",
    "for cluster_no in range(n_clusters):\n",
    "    cluster_indices = np.where(train_labels_clustered == cluster_no)[0]\n",
    "    cluster_images = train_images_flattened[cluster_indices]\n",
    "    cluster_labels = train_labels[cluster_indices]\n",
    "    \n",
    "    distances = np.linalg.norm(cluster_images - cluster_centers[cluster_no], axis=1)\n",
    "    nearest_index = np.argmin(distances)\n",
    "    nearest_images.append(cluster_images[nearest_index])\n",
    "    nearest_labels.append(cluster_labels[nearest_index])\n",
    "\n",
    "nearest_images = np.array(nearest_images)\n",
    "nearest_labels = np.array(nearest_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9cb6ce2c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 4, 7, 2, 2, 8, 9, 3, 9, 0, 9, 0, 7, 8, 8, 1, 2, 3, 6, 2],\n",
       "      dtype=uint8)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nearest_labels"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "523dea64",
   "metadata": {},
   "source": [
    "## Propagation \n",
    "- Finding a fraction of nearest images within a cluster and labelling them with the nearest label to the centrod of the cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "996ac506",
   "metadata": {},
   "outputs": [],
   "source": [
    "nearest_images_within_cluster = []\n",
    "nearest_labels_within_cluster = []\n",
    "\n",
    "for cluster_no in range(n_clusters):\n",
    "    cluster_indices = np.where(train_labels_clustered == cluster_no)[0]\n",
    "    cluster_images = train_images_flattened[cluster_indices]\n",
    "    cluster_labels = train_labels[cluster_indices]\n",
    "    \n",
    "    num_nearest = max(1, len(cluster_images) // 5)\n",
    "    \n",
    "#     distances = np.linalg.norm(cluster_images - cluster_centers[cluster_no], axis=1)\n",
    "    distances = np.linalg.norm(cluster_images - nearest_images[cluster_no], axis=1)\n",
    "    nearest_indices = np.argsort(distances)[:num_nearest]\n",
    "    \n",
    "    nearest_images_within_cluster.extend(cluster_images[nearest_indices])\n",
    "    nearest_labels_within_cluster.extend([nearest_labels[cluster_no]]*num_nearest)\n",
    "\n",
    "nearest_images_within_cluster = np.array(nearest_images_within_cluster)\n",
    "nearest_labels_within_cluster = np.array(nearest_labels_within_cluster)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ed6562c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((11993, 784), (11993,))"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nearest_images_within_cluster.shape, nearest_labels_within_cluster.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ac1d7332",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = nearest_images_within_cluster\n",
    "y = nearest_labels_within_cluster"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d75111a5",
   "metadata": {},
   "source": [
    "## Supervised model for classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "975a5b35",
   "metadata": {},
   "outputs": [],
   "source": [
    "mlp = MLPClassifier(hidden_layer_sizes=(100,), max_iter=500, random_state=42)\n",
    "mlp.fit(nearest_images_within_cluster, nearest_labels_within_cluster)\n",
    "y_pred = mlp.predict(test_images_flattened)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6b0b623d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6091\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(test_labels,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "139b7f23",
   "metadata": {},
   "source": [
    "## Semi-supervised model with Kmeans and MLPClassifier\n",
    "- Just added all the steps above in as a function `model`\n",
    "- Hyperparameter `threshold` is fraction of images we need to add in data for supervised learning with `MLPClassifier` within a cluster."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "01e78e57",
   "metadata": {},
   "outputs": [],
   "source": [
    "def model(train_images, train_labels, n_clusters, threshold):\n",
    "    train_images_flattened = train_images.reshape(train_images.shape[0], -1)\n",
    "    test_images_flattened = test_images.reshape(test_images.shape[0], -1)\n",
    "\n",
    "    kmeans = KMeans(n_clusters=n_clusters, n_init = 5)\n",
    "    kmeans.fit(train_images_flattened)\n",
    "    train_labels_clustered = kmeans.labels_\n",
    "    cluster_centers = kmeans.cluster_centers_\n",
    "    \n",
    "    nearest_images = []\n",
    "    nearest_labels = []\n",
    "\n",
    "    for cluster_no in range(n_clusters):\n",
    "        cluster_indices = np.where(train_labels_clustered == cluster_no)[0]\n",
    "        cluster_images = train_images_flattened[cluster_indices]\n",
    "        cluster_labels = train_labels[cluster_indices]\n",
    "\n",
    "        distances = np.linalg.norm(cluster_images - cluster_centers[cluster_no], axis=1)\n",
    "        nearest_index = np.argmin(distances)\n",
    "        nearest_images.append(cluster_images[nearest_index])\n",
    "        nearest_labels.append(cluster_labels[nearest_index])\n",
    "\n",
    "    nearest_images = np.array(nearest_images)\n",
    "    nearest_labels = np.array(nearest_labels)\n",
    "    \n",
    "    nearest_images_within_cluster = []\n",
    "    nearest_labels_within_cluster = []\n",
    "\n",
    "    for cluster_no in range(n_clusters):\n",
    "        cluster_indices = np.where(train_labels_clustered == cluster_no)[0]\n",
    "        cluster_images = train_images_flattened[cluster_indices]\n",
    "        cluster_labels = train_labels[cluster_indices]\n",
    "\n",
    "        num_nearest = math.ceil(len(cluster_images) * threshold)\n",
    "\n",
    "        distances = np.linalg.norm(cluster_images - cluster_centers[cluster_no], axis=1)\n",
    "        nearest_indices = np.argsort(distances)[:num_nearest]\n",
    "\n",
    "        nearest_images_within_cluster.extend(cluster_images[nearest_indices])\n",
    "        nearest_labels_within_cluster.extend([nearest_labels[cluster_no]]*num_nearest)\n",
    "\n",
    "    nearest_images_within_cluster = np.array(nearest_images_within_cluster)\n",
    "    nearest_labels_within_cluster = np.array(nearest_labels_within_cluster)\n",
    "    \n",
    "    mlp = MLPClassifier(hidden_layer_sizes=(100,), max_iter=500, random_state=42)\n",
    "    mlp.fit(nearest_images_within_cluster, nearest_labels_within_cluster)\n",
    "    y_pred = mlp.predict(test_images_flattened)\n",
    "    y_pred_train = mlp.predict(train_images_flattened)\n",
    "    \n",
    "    return (accuracy_score(train_labels,y_pred_train), accuracy_score(test_labels,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d379867",
   "metadata": {},
   "source": [
    "## Experimenting with different values of n_clusters and threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b3e30d71",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "threshold = 0.01 n_clusters = 40 time taken =  113.0 test_score =  0.6117 train_score =  0.6236\n",
      "threshold = 0.01 n_clusters = 50 time taken =  159.7 test_score =  0.6411 train_score =  0.64408\n",
      "threshold = 0.05 n_clusters = 40 time taken =  138.4 test_score =  0.6001 train_score =  0.6109\n",
      "threshold = 0.05 n_clusters = 50 time taken =  175.3 test_score =  0.6694 train_score =  0.67877\n",
      "threshold = 0.1 n_clusters = 40 time taken =  129.8 test_score =  0.6435 train_score =  0.64755\n",
      "threshold = 0.1 n_clusters = 50 time taken =  173.2 test_score =  0.6456 train_score =  0.64587\n",
      "threshold = 0.25 n_clusters = 40 time taken =  161.6 test_score =  0.6153 train_score =  0.62502\n",
      "threshold = 0.25 n_clusters = 50 time taken =  261.4 test_score =  0.6444 train_score =  0.6515\n",
      "threshold = 0.5 n_clusters = 40 time taken =  257.3 test_score =  0.5943 train_score =  0.59888\n",
      "threshold = 0.5 n_clusters = 50 time taken =  294.6 test_score =  0.6493 train_score =  0.65628\n"
     ]
    }
   ],
   "source": [
    "for threshold in [0.01, 0.05, 0.1,0.25,0.5]:\n",
    "    for n_clusters in [40,50]:\n",
    "        st = time.time()\n",
    "        train_score, test_score = model(train_images, train_labels, n_clusters, threshold)\n",
    "        print(\"threshold =\", threshold, \"n_clusters =\", n_clusters, \"time taken = \", round(time.time()-st,1), \"test_score = \", round(test_score,5), \"train_score = \", round(train_score,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4a158a4",
   "metadata": {},
   "source": [
    "## Best hyperparameters\n",
    "- threshold = 0.05 n_clusters = 50  test_score =  **0.6694** train_score =  0.67877\n",
    "   \n",
    "## Improvements possible\n",
    "- We can experiment with different hyperparameters like `n_init` in KMeans, `hidden_layer_sizes`, `activation` and `max_iter` in `MLPClassifier`.\n",
    "- But due limited computational power, we haven't tried them."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
